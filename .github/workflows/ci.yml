name: Jhin CI/CD

on:
  push:
    branches: [ main ]
    tags:
        - 'v*.*.*'
  pull_request:
    branches: [ main ]

jobs:
  build-test-coverage:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Node
        uses: actions/setup-node@v2
        with:
          node-version: 23

      - name: Install dependencies
        run: npm install

      - name: Security Audit
        run: npm run audit

      - name: Run tests (with coverage)
        run: npm run coverage

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report
          path: coverage

  codeql-scan:
    needs: [build-test-coverage]
    runs-on: ubuntu-latest

    permissions:
      security-events: write

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        with:
          languages: javascript

      - name: Install & build
        run: |
          npm install
          npm run build

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v1

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build-test-coverage, codeql-scan]
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Node
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Install dependencies
        run: npm install

      - name: Build library
        run: npm run build

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ github.ref_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload build artifact
        uses: actions/upload-release-asset@v1
        if: steps.create_release.outputs.upload_url != ''
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/jhin.zip
          asset_name: jhin.zip
          asset_content_type: application/zip

      - name: Publish to npm
        run: |
          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
          npm publish
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
